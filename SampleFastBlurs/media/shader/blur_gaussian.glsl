-- _global

// the function:
//      vec3 GaussianBlur( sampler2D tex0, vec2 centreUV, vec2 halfPixelOffset, vec2 pixelOffset )
// is automatically generated by GenerateGaussFunctionCode in GaussianBlur.h
//
// here'e an example:
// 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// // automatically generated by GenerateGaussFunctionCode in GaussianBlur.h                                                                                            
// vec3 GaussianBlur( sampler2D tex0, vec2 centreUV, vec2 halfPixelOffset, vec2 pixelOffset )                                                                           
// {                                                                                                                                                                    
//     vec3 colOut = vec3( 0, 0, 0 );                                                                                                                                   
//                                                                                                                                                                      
//     //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
//     // Kernel width 35 x 35
//     //
//     const int stepCount = 9;
//     //
//     const float gWeights[stepCount] ={
//        0.10855,
//        0.13135,
//        0.10406,
//        0.07216,
//        0.04380,
//        0.02328,
//        0.01083,
//        0.00441,
//        0.00157
//     };
//     const float gOffsets[stepCount] ={
//        0.66293,
//        2.47904,
//        4.46232,
//        6.44568,
//        8.42917,
//        10.41281,
//        12.39664,
//        14.38070,
//        16.36501
//     };
//     //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
//                                                                                                                                                                      
//     for( int i = 0; i < stepCount; i++ )                                                                                                                             
//     {                                                                                                                                                                
//         vec2 texCoordOffset = gOffsets[i] * pixelOffset;                                                                                                           
//         vec3 col = texture( tex0, centreUV + texCoordOffset ).xyz + texture( tex0, centreUV - texCoordOffset ).xyz;                                                
//         colOut += gWeights[i] * col;                                                                                                                               
//     }                                                                                                                                                                
//                                                                                                                                                                      
//     return colOut;                                                                                                                                                   
// }                                                                                                                                                                    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



-- Vertex

in vec2 Position;
//in vec2 TexCoord;
out vec2 vTexCoord;

void main()
{
    gl_Position = vec4( Position.x, Position.y, 0.0, 1.0 );
    vTexCoord = vec2( Position.x * 0.5 + 0.5, Position.y * 0.5 + 0.5 );
}


-- FragHoriz
precision highp float;
out vec4 FragColor;
in vec2 vTexCoord;

uniform vec4 uRTPixelSizePixelSizeHalf;
uniform sampler2D uTex0;

void main()
{
    FragColor.xyz = GaussianBlur( uTex0, vTexCoord, vec2( uRTPixelSizePixelSizeHalf.z, 0 ), vec2( uRTPixelSizePixelSizeHalf.x, 0 ) );
    FragColor.w = 0.05;
}

-- FragVert
precision highp float;
out vec4 FragColor;
in vec2 vTexCoord;
uniform vec4 uRTPixelSizePixelSizeHalf;

uniform sampler2D uTex0;

void main()
{
    FragColor.xyz = GaussianBlur( uTex0, vTexCoord, vec2( 0, uRTPixelSizePixelSizeHalf.w ), vec2( 0, uRTPixelSizePixelSizeHalf.y ) );
    FragColor.w = 0.05;
}

